#include <base_local_planner/line_iterator.h>  // bresenham 
#include <math.h>

int x0_map = 0;
int y0_map = 1;
int x1_map = 10;
int y1_map = -10;
int thick_ = 10;

double m = -1.0 * (x1_map - x0_map)/(y1_map - y0_map);
double dx = thick_/2.0/sqrt(1.0+m*m);
double dy = dx * m;
dx = int(round(dx));
dy = int(round(dy));

for(base_local_planner::LineIterator line_(dx, dy, -dx, -dy); line_.isValid(); line_.advance()){ 
    double x0 = x0_map+line_.getX();
    double y0 = y0_map+line_.getY();
    double x1 = x1_map+line_.getX();
    double y1 = y1_map+line_.getY();
    // make sure the two ends are within the map
    if(x0<master_grid.getSizeInCellsX() && x1<master_grid.getSizeInCellsX() && y0<master_grid.getSizeInCellsY() && y1<master_grid.getSizeInCellsY()){
        // points generated by Bresenham
        for(base_local_planner::LineIterator line(x0, y0, x1, y1); line.isValid(); line.advance()){ 
        master_grid.setCost(line.getX(), line.getY(), NOT_COLLISION_HIGH);      
        }
        for(base_local_planner::LineIterator line(x0, y0+1, x1, y1+1); line.isValid(); line.advance()){ 
        master_grid.setCost(line.getX(), line.getY(), NOT_COLLISION_HIGH);      
        }
    }
}